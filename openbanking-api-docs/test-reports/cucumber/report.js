$(document).ready(function() {var formatter = new CucumberHTML.DOMFormatter($('.cucumber-report'));formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/accountAccessConsents/account-access-consents.feature");
formatter.feature({
  "name": "AccountAccessConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Account Access Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Account Access Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Account Access Consents Deleted",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Account Access Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Account Access Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Account Access Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Account Access Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/accounts/accounts.feature");
formatter.feature({
  "name": "AccountsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Accounts Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Accounts Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Accounts - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Accounts\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Balances Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Beneficiaries Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Direct Debits Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Offers Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Parties Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Parties Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Products Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Scheduled Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Standing Orders Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Statements Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Statements Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Statements Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Transactions Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Transactions Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/atms/atms.feature");
formatter.feature({
  "name": "AtmsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have sent a request which could not be understood.",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:237)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 400(file:src/test/java/com/laegler/openbanking/api/feature/atms/atms.feature:12)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - An error occurred on the server. No further information is available.",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 500(file:src/test/java/com/laegler/openbanking/api/feature/atms/atms.feature:23)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - The service is temporarily unavailable.",
  "description": "\tExpecting HTTP status code: 503",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 503",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 503(file:src/test/java/com/laegler/openbanking/api/feature/atms/atms.feature:34)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Successful response with a list of \u0026#x60;ATM\u0026#x60; data",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 200(file:src/test/java/com/laegler/openbanking/api/feature/atms/atms.feature:45)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Your client has failed to submit a request, and a timeout has occurred.",
  "description": "\tExpecting HTTP status code: 408",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 408",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 408(file:src/test/java/com/laegler/openbanking/api/feature/atms/atms.feature:56)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have requested this resource too often. Slow down.",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 429(file:src/test/java/com/laegler/openbanking/api/feature/atms/atms.feature:67)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/balances/balances.feature");
formatter.feature({
  "name": "BalancesApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Balances Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Balances - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Balances\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/beneficiaries/beneficiaries.feature");
formatter.feature({
  "name": "BeneficiariesApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Beneficiaries Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Beneficiaries - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Beneficiaries\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/branches/branches.feature");
formatter.feature({
  "name": "BranchesApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have sent a request which could not be understood.",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 400(file:src/test/java/com/laegler/openbanking/api/feature/branches/branches.feature:12)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - An error occurred on the server. No further information is available.",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 500(file:src/test/java/com/laegler/openbanking/api/feature/branches/branches.feature:23)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - The service is temporarily unavailable.",
  "description": "\tExpecting HTTP status code: 503",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 503",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 503(file:src/test/java/com/laegler/openbanking/api/feature/branches/branches.feature:34)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Successful response with a list of \u0026#x60;Branch\u0026#x60; data",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 200(file:src/test/java/com/laegler/openbanking/api/feature/branches/branches.feature:45)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Your client has failed to submit a request, and a timeout has occurred.",
  "description": "\tExpecting HTTP status code: 408",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 408",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 408(file:src/test/java/com/laegler/openbanking/api/feature/branches/branches.feature:56)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have requested this resource too often. Slow down.",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 429(file:src/test/java/com/laegler/openbanking/api/feature/branches/branches.feature:67)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/businessCurrentAccounts/business-current-accounts.feature");
formatter.feature({
  "name": "BusinessCurrentAccountsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have sent a request which could not be understood.",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 400(file:src/test/java/com/laegler/openbanking/api/feature/businessCurrentAccounts/business-current-accounts.feature:12)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - An error occurred on the server. No further information is available.",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 500(file:src/test/java/com/laegler/openbanking/api/feature/businessCurrentAccounts/business-current-accounts.feature:23)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - The service is temporarily unavailable.",
  "description": "\tExpecting HTTP status code: 503",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 503",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 503(file:src/test/java/com/laegler/openbanking/api/feature/businessCurrentAccounts/business-current-accounts.feature:34)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Successful response with a list of \u0026#x60;Branch Current Account\u0026#x60; data",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 200(file:src/test/java/com/laegler/openbanking/api/feature/businessCurrentAccounts/business-current-accounts.feature:45)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Your client has failed to submit a request, and a timeout has occurred.",
  "description": "\tExpecting HTTP status code: 408",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 408",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 408(file:src/test/java/com/laegler/openbanking/api/feature/businessCurrentAccounts/business-current-accounts.feature:56)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have requested this resource too often. Slow down.",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 429(file:src/test/java/com/laegler/openbanking/api/feature/businessCurrentAccounts/business-current-accounts.feature:67)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/callbackUrls/callback-urls.feature");
formatter.feature({
  "name": "CallbackUrlsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Callback URL changed",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a callback URI - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Callback URL changed",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Amend a callback URI - Unsupported Media Type",
  "description": "\tExpecting HTTP status code: 415",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Amend a callback URI\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 415",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - An array of callback URLs",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Read all callback URLs - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Read all callback URLs\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Callback URL created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a callback URL - Unsupported Media Type",
  "description": "\tExpecting HTTP status code: 415",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a callback URL\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 415",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/certificate/certificate.feature");
formatter.feature({
  "name": "CertificateApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Validate certificate - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Validate certificate\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Validate certificate - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Validate certificate\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Validate certificate - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Validate certificate\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Validate certificate - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Validate certificate\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Validate certificate - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Validate certificate\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Validate certificate - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Validate certificate\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Validate certificate - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Validate certificate\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/commercialCreditCards/commercial-credit-cards.feature");
formatter.feature({
  "name": "CommercialCreditCardsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have sent a request which could not be understood.",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 400(file:src/test/java/com/laegler/openbanking/api/feature/commercialCreditCards/commercial-credit-cards.feature:12)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - An error occurred on the server. No further information is available.",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 500(file:src/test/java/com/laegler/openbanking/api/feature/commercialCreditCards/commercial-credit-cards.feature:23)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - The service is temporarily unavailable.",
  "description": "\tExpecting HTTP status code: 503",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 503",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 503(file:src/test/java/com/laegler/openbanking/api/feature/commercialCreditCards/commercial-credit-cards.feature:34)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Successful response with a list of \u0026#x60;Commercial Credit Card\u0026#x60; data",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 200(file:src/test/java/com/laegler/openbanking/api/feature/commercialCreditCards/commercial-credit-cards.feature:45)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Your client has failed to submit a request, and a timeout has occurred.",
  "description": "\tExpecting HTTP status code: 408",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 408",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 408(file:src/test/java/com/laegler/openbanking/api/feature/commercialCreditCards/commercial-credit-cards.feature:56)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have requested this resource too often. Slow down.",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 429(file:src/test/java/com/laegler/openbanking/api/feature/commercialCreditCards/commercial-credit-cards.feature:67)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/directDebits/direct-debits.feature");
formatter.feature({
  "name": "DirectDebitsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Direct Debits Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Direct Debits - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Direct Debits\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/domesticPaymentConsents/domestic-payment-consents.feature");
formatter.feature({
  "name": "DomesticPaymentConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Domestic Payment Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Domestic Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Domestic Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/domesticPayments/domestic-payments.feature");
formatter.feature({
  "name": "DomesticPaymentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Domestic Payments Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Domestic Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Payment Details Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/domesticScheduledPaymentConsents/domestic-scheduled-payment-consents.feature");
formatter.feature({
  "name": "DomesticScheduledPaymentConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Domestic Scheduled Payment Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Domestic Scheduled Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/domesticScheduledPayments/domestic-scheduled-payments.feature");
formatter.feature({
  "name": "DomesticScheduledPaymentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Domestic Scheduled Payments Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Scheduled Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Domestic Scheduled Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Scheduled Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Payment Details Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/domesticStandingOrderConsents/domestic-standing-order-consents.feature");
formatter.feature({
  "name": "DomesticStandingOrderConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Domestic Standing Order Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Order Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Domestic Standing Order Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Order Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/domesticStandingOrders/domestic-standing-orders.feature");
formatter.feature({
  "name": "DomesticStandingOrdersApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Domestic Standing Orders Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Domestic Standing Orders - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Domestic Standing Orders Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Domestic Standing Orders - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Domestic Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Payment Details Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/eventNotifications/event-notifications.feature");
formatter.feature({
  "name": "EventNotificationsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Send an event notification - Accepted",
  "description": "\tExpecting HTTP status code: 202",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Send an event notification\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/jwt\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 202",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/eventSubscriptions/event-subscriptions.feature");
formatter.feature({
  "name": "EventSubscriptionsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Event Subscription Changed",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Change Event Subscription - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Change Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Event Subscription Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Event Subscription - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Event Subscription Deleted",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Event Subscription - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Event Subscription Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Event Subscription - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Event Subscription\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/events/events.feature");
formatter.feature({
  "name": "EventsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Events Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Events - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Events\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/filePaymentConsents/file-payment-consents.feature");
formatter.feature({
  "name": "FilePaymentConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - File Payment Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - File Payment Consents Created",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - File Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - File Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/filePayments/file-payments.feature");
formatter.feature({
  "name": "FilePaymentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - File Payments Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create File Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - File Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Payment Details Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - File Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get File Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get File Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/fundsConfirmationConsents/funds-confirmation-consents.feature");
formatter.feature({
  "name": "FundsConfirmationConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Funds Confirmation Consent Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation Consent - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Funds Confirmation Consent Deleted",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete Funds Confirmation Consent - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Funds Confirmation Consent Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Funds Confirmation Consent - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Funds Confirmation Consent\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/fundsConfirmations/funds-confirmations.feature");
formatter.feature({
  "name": "FundsConfirmationsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Funds Confirmation Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create Funds Confirmation - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create Funds Confirmation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/internationalPaymentConsents/international-payment-consents.feature");
formatter.feature({
  "name": "InternationalPaymentConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - International Payment Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - International Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - International Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/internationalPayments/international-payments.feature");
formatter.feature({
  "name": "InternationalPaymentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - International Payments Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - International Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Payment Details Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/internationalScheduledPaymentConsents/international-scheduled-payment-consents.feature");
formatter.feature({
  "name": "InternationalScheduledPaymentConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - International Scheduled Payment Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - International Scheduled Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - International Scheduled Payment Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payment Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payment Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/internationalScheduledPayments/international-scheduled-payments.feature");
formatter.feature({
  "name": "InternationalScheduledPaymentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - International Scheduled Payments Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Scheduled Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - International Scheduled Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Scheduled Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Payment Details Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/internationalStandingOrderConsents/international-standing-order-consents.feature");
formatter.feature({
  "name": "InternationalStandingOrderConsentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - International Standing Order Consents Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Order Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - International Standing Order Consents Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Order Consents - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Order Consents\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/internationalStandingOrders/international-standing-orders.feature");
formatter.feature({
  "name": "InternationalStandingOrdersApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - International Standing Orders Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create International Standing Orders - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - International Standing Orders Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get International Standing Orders - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get International Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Payment Details Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Payment Details - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Payment Details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/oBAccountPaymentServiceProviders/OBAccountPaymentServiceProviders.feature");
formatter.feature({
  "name": "OBAccountPaymentServiceProvidersApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Search for one or more resources\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve the resource - The retrieved resource is included in the response body",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve the resource\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources using HTTP POST - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Search for one or more resources using HTTP POST\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/oBAuthorities/OBAuthorities.feature");
formatter.feature({
  "name": "OBAuthoritiesApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Search for one or more resources\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve the resource - The retrieved resource is included in the response body",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve the resource\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources using HTTP POST - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Search for one or more resources using HTTP POST\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/oBQualifiedTrustServiceProviders/OBQualifiedTrustServiceProviders.feature");
formatter.feature({
  "name": "OBQualifiedTrustServiceProvidersApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Search for one or more resources\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve the resource - The retrieved resource is included in the response body",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve the resource\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources using HTTP POST - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Search for one or more resources using HTTP POST\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/oBThirdPartyProviders/OBThirdPartyProviders.feature");
formatter.feature({
  "name": "OBThirdPartyProvidersApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Search for one or more resources\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve the resource - The retrieved resource is included in the response body",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve the resource\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Search for one or more resources using HTTP POST - SCIM 2.0 List Response Message",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Search for one or more resources using HTTP POST\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/offers/offers.feature");
formatter.feature({
  "name": "OffersApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Offers Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Offers - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Offers\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/organisation/organisation.feature");
formatter.feature({
  "name": "OrganisationApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get all organisations that the client is authorised to retrieve - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all organisations that the client is authorised to retrieve\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all organisations that the client is authorised to retrieve - List of the organisation - Schema in scim-swagger.json",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all organisations that the client is authorised to retrieve\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete an Authorisation Server - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete an Authorisation Server\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete an Authorisation Server - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete an Authorisation Server\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete an Authorisation Server - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete an Authorisation Server\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete an Authorisation Server - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete an Authorisation Server\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete an Authorisation Server - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete an Authorisation Server\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete an Authorisation Server - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete an Authorisation Server\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete an Authorisation Server - No Content",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete an Authorisation Server\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get .well-known entity - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get .well-known entity - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get .well-known entity - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get .well-known entity - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get .well-known entity - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get .well-known entity - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get .well-known entity - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update .well-known entity - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update .well-known entity - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update .well-known entity - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update .well-known entity - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update .well-known entity - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update .well-known entity - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update .well-known entity - Accepted",
  "description": "\tExpecting HTTP status code: 202",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update .well-known entity\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 202",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all Authorisation Servers for the given organisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all Authorisation Servers for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all Authorisation Servers for the given organisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all Authorisation Servers for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all Authorisation Servers for the given organisation - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all Authorisation Servers for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all Authorisation Servers for the given organisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all Authorisation Servers for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all Authorisation Servers for the given organisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all Authorisation Servers for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all Authorisation Servers for the given organisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all Authorisation Servers for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all Authorisation Servers for the given organisation - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all Authorisation Servers for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create an Authorisation Server for the given organisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create an Authorisation Server for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create an Authorisation Server for the given organisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create an Authorisation Server for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create an Authorisation Server for the given organisation - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create an Authorisation Server for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create an Authorisation Server for the given organisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create an Authorisation Server for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create an Authorisation Server for the given organisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create an Authorisation Server for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create an Authorisation Server for the given organisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create an Authorisation Server for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create an Authorisation Server for the given organisation - OK",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create an Authorisation Server for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates for the given organisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates for the given organisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates for the given organisation - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates for the given organisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates for the given organisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates for the given organisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates for the given organisation - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Revoke or remove a certificate with the given CertificateOrKeyId - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Revoke or remove a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Revoke or remove a certificate with the given CertificateOrKeyId - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Revoke or remove a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Revoke or remove a certificate with the given CertificateOrKeyId - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Revoke or remove a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Revoke or remove a certificate with the given CertificateOrKeyId - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Revoke or remove a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Revoke or remove a certificate with the given CertificateOrKeyId - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Revoke or remove a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Revoke or remove a certificate with the given CertificateOrKeyId - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Revoke or remove a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Revoke or remove a certificate with the given CertificateOrKeyId - No Content",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Revoke or remove a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve a certificate with the given CertificateOrKeyId - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve a certificate with the given CertificateOrKeyId - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve a certificate with the given CertificateOrKeyId - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve a certificate with the given CertificateOrKeyId - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve a certificate with the given CertificateOrKeyId - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve a certificate with the given CertificateOrKeyId - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Retrieve a certificate with the given CertificateOrKeyId - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Retrieve a certificate with the given CertificateOrKeyId\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given OrganisationCertificateType for the given oranisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given OrganisationCertificateType for the given oranisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given OrganisationCertificateType for the given oranisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given OrganisationCertificateType for the given oranisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given OrganisationCertificateType for the given oranisation - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given OrganisationCertificateType for the given oranisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given OrganisationCertificateType for the given oranisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given OrganisationCertificateType for the given oranisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given OrganisationCertificateType for the given oranisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given OrganisationCertificateType for the given oranisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given OrganisationCertificateType for the given oranisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given OrganisationCertificateType for the given oranisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given OrganisationCertificateType for the given oranisation - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given OrganisationCertificateType for the given oranisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Store or create a new certificate of the given OrganisationCertificateType for the given organisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Store or create a new certificate of the given OrganisationCertificateType for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Store or create a new certificate of the given OrganisationCertificateType for the given organisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Store or create a new certificate of the given OrganisationCertificateType for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Store or create a new certificate of the given OrganisationCertificateType for the given organisation - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Store or create a new certificate of the given OrganisationCertificateType for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Store or create a new certificate of the given OrganisationCertificateType for the given organisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Store or create a new certificate of the given OrganisationCertificateType for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Store or create a new certificate of the given OrganisationCertificateType for the given organisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Store or create a new certificate of the given OrganisationCertificateType for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Store or create a new certificate of the given OrganisationCertificateType for the given organisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Store or create a new certificate of the given OrganisationCertificateType for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Store or create a new certificate of the given OrganisationCertificateType for the given organisation - Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Store or create a new certificate of the given OrganisationCertificateType for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the business or the technical contacts for the given organisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the business or the technical contacts for the given organisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the business or the technical contacts for the given organisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the business or the technical contacts for the given organisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the business or the technical contacts for the given organisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the business or the technical contacts for the given organisation - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update the business or the technical contacts for the given organisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update the business or the technical contacts for the given organisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update the business or the technical contacts for the given organisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update the business or the technical contacts for the given organisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update the business or the technical contacts for the given organisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update the business or the technical contacts for the given organisation - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update the business or the technical contacts for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the given organisation\u0026#39;s details - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the given organisation\u0027s details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the given organisation\u0026#39;s details - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the given organisation\u0027s details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the given organisation\u0026#39;s details - Full details of the organisation - Schema in scim-swagger.json",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the given organisation\u0027s details\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all software statements for the given organisation - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all software statements for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all software statements for the given organisation - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all software statements for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all software statements for the given organisation - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all software statements for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all software statements for the given organisation - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all software statements for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all software statements for the given organisation - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all software statements for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get all software statements for the given organisation - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get all software statements for the given organisation\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Create a software statement - Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Create a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get certificates for the given software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get certificates for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get certificates for the given software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get certificates for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get certificates for the given software statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get certificates for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get certificates for the given software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get certificates for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get certificates for the given software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get certificates for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get certificates for the given software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get certificates for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get certificates for the given software statement - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get certificates for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificate of the given type and ID for the given software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificate of the given type and ID for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificate of the given type and ID for the given software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificate of the given type and ID for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificate of the given type and ID for the given software statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificate of the given type and ID for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificate of the given type and ID for the given software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificate of the given type and ID for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificate of the given type and ID for the given software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificate of the given type and ID for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificate of the given type and ID for the given software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificate of the given type and ID for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificate of the given type and ID for the given software statement - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificate of the given type and ID for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - Conflict",
  "description": "\tExpecting HTTP status code: 409",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 409",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement - No Content",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given type for the given software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given type for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given type for the given software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given type for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given type for the given software statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given type for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given type for the given software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given type for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given type for the given software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given type for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given type for the given software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given type for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get the certificates of the given type for the given software statement - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get the certificates of the given type for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a key or create a new certificate for the given software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a key or create a new certificate for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a key or create a new certificate for the given software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a key or create a new certificate for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a key or create a new certificate for the given software statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a key or create a new certificate for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a key or create a new certificate for the given software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a key or create a new certificate for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a key or create a new certificate for the given software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a key or create a new certificate for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a key or create a new certificate for the given software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a key or create a new certificate for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a key or create a new certificate for the given software statement - Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a key or create a new certificate for the given software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a software statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a software statement - Created",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a software statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a software statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a software statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a software statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a software statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a software statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a software statement - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a software statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Add a redirect URI to the given Software Statement - Conflict",
  "description": "\tExpecting HTTP status code: 409",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Add a redirect URI to the given Software Statement\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 409",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a Software Statement Assertion for the given SoftwareStatementID. - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a Software Statement Assertion for the given SoftwareStatementID.\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a Software Statement Assertion for the given SoftwareStatementID. - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a Software Statement Assertion for the given SoftwareStatementID.\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a Software Statement Assertion for the given SoftwareStatementID. - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a Software Statement Assertion for the given SoftwareStatementID.\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a Software Statement Assertion for the given SoftwareStatementID. - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a Software Statement Assertion for the given SoftwareStatementID.\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a Software Statement Assertion for the given SoftwareStatementID. - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a Software Statement Assertion for the given SoftwareStatementID.\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a Software Statement Assertion for the given SoftwareStatementID. - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a Software Statement Assertion for the given SoftwareStatementID.\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a Software Statement Assertion for the given SoftwareStatementID. - OK",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a Software Statement Assertion for the given SoftwareStatementID.\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Enrol a eIDAS QWAC/QSealC-bearing participant - Bad Request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Enrol a eIDAS QWAC/QSealC-bearing participant\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Enrol a eIDAS QWAC/QSealC-bearing participant - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Enrol a eIDAS QWAC/QSealC-bearing participant\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Enrol a eIDAS QWAC/QSealC-bearing participant - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Enrol a eIDAS QWAC/QSealC-bearing participant\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Enrol a eIDAS QWAC/QSealC-bearing participant - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Enrol a eIDAS QWAC/QSealC-bearing participant\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Enrol a eIDAS QWAC/QSealC-bearing participant - Bad Gateway",
  "description": "\tExpecting HTTP status code: 502",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Enrol a eIDAS QWAC/QSealC-bearing participant\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 502",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Enrol a eIDAS QWAC/QSealC-bearing participant - Created",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Enrol a eIDAS QWAC/QSealC-bearing participant\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/party/party.feature");
formatter.feature({
  "name": "PartyApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Parties Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Parties - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Parties\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/personalCurrentAccounts/personal-current-accounts.feature");
formatter.feature({
  "name": "PersonalCurrentAccountsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have sent a request which could not be understood.",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 400(file:src/test/java/com/laegler/openbanking/api/feature/personalCurrentAccounts/personal-current-accounts.feature:12)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - An error occurred on the server. No further information is available.",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 500(file:src/test/java/com/laegler/openbanking/api/feature/personalCurrentAccounts/personal-current-accounts.feature:23)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - The service is temporarily unavailable.",
  "description": "\tExpecting HTTP status code: 503",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 503",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 503(file:src/test/java/com/laegler/openbanking/api/feature/personalCurrentAccounts/personal-current-accounts.feature:34)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Successful response with a list of \u0026#x60;Personal Current Account\u0026#x60; data",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 200(file:src/test/java/com/laegler/openbanking/api/feature/personalCurrentAccounts/personal-current-accounts.feature:45)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Your client has failed to submit a request, and a timeout has occurred.",
  "description": "\tExpecting HTTP status code: 408",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 408",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 408(file:src/test/java/com/laegler/openbanking/api/feature/personalCurrentAccounts/personal-current-accounts.feature:56)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have requested this resource too often. Slow down.",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 429(file:src/test/java/com/laegler/openbanking/api/feature/personalCurrentAccounts/personal-current-accounts.feature:67)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/products/products.feature");
formatter.feature({
  "name": "ProductsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Products Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Products - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Products\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/register/register.feature");
formatter.feature({
  "name": "RegisterApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a client by way of Client ID - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a client by way of Client ID - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a client by way of Client ID - Forbidden",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Delete a client by way of Client ID - Client deleted",
  "description": "\tExpecting HTTP status code: 204",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"DELETE\" to \"Delete a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 204",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a client by way of Client ID - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a client by way of Client ID - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get a client by way of Client ID - Client registration",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a client by way of Client ID - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a client by way of Client ID - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a client by way of Client ID - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Update a client by way of Client ID - Client registration",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"PUT\" to \"Update a client by way of Client ID\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Register a client by way of a Software Statement Assertion - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Register a client by way of a Software Statement Assertion\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Register a client by way of a Software Statement Assertion - Client registration",
  "description": "\tExpecting HTTP status code: 201",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"POST\" to \"Register a client by way of a Software Statement Assertion\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 201",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/scheduledPayments/scheduled-payments.feature");
formatter.feature({
  "name": "ScheduledPaymentsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Scheduled Payments Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Scheduled Payments - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Scheduled Payments\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/standingOrders/standing-orders.feature");
formatter.feature({
  "name": "StandingOrdersApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Standing Orders Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Standing Orders - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Standing Orders\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/statements/statements.feature");
formatter.feature({
  "name": "StatementsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Statements Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Statements - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Statements\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/transactions/transactions.feature");
formatter.feature({
  "name": "TransactionsApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Bad request",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Unauthorized",
  "description": "\tExpecting HTTP status code: 401",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 401",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Forbidden",
  "description": "\tExpecting HTTP status code: 403",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 403",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Not found",
  "description": "\tExpecting HTTP status code: 404",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 404",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Internal Server Error",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Method Not Allowed",
  "description": "\tExpecting HTTP status code: 405",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 405",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Not Acceptable",
  "description": "\tExpecting HTTP status code: 406",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 406",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Transactions Read",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.scenario({
  "name": "As an API-user I want to Get Transactions - Too Many Requests",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"Get Transactions\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "passed"
});
formatter.uri("file:src/test/java/com/laegler/openbanking/api/feature/unsecuredSmeLoans/unsecured-sme-loans.feature");
formatter.feature({
  "name": "UnsecuredSmeLoansApi",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have sent a request which could not be understood.",
  "description": "\tExpecting HTTP status code: 400",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 400",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 400(file:src/test/java/com/laegler/openbanking/api/feature/unsecuredSmeLoans/unsecured-sme-loans.feature:12)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - An error occurred on the server. No further information is available.",
  "description": "\tExpecting HTTP status code: 500",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 500",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 500(file:src/test/java/com/laegler/openbanking/api/feature/unsecuredSmeLoans/unsecured-sme-loans.feature:23)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - The service is temporarily unavailable.",
  "description": "\tExpecting HTTP status code: 503",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 503",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 503(file:src/test/java/com/laegler/openbanking/api/feature/unsecuredSmeLoans/unsecured-sme-loans.feature:34)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Successful response with a list of \u0026#x60;Unsecured SME Lending\u0026#x60; data",
  "description": "\tExpecting HTTP status code: 200",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 200(file:src/test/java/com/laegler/openbanking/api/feature/unsecuredSmeLoans/unsecured-sme-loans.feature:45)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - Your client has failed to submit a request, and a timeout has occurred.",
  "description": "\tExpecting HTTP status code: 408",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 408",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 408(file:src/test/java/com/laegler/openbanking/api/feature/unsecuredSmeLoans/unsecured-sme-loans.feature:56)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.scenario({
  "name": "As an API-user I want to  - You have requested this resource too often. Slow down.",
  "description": "\tExpecting HTTP status code: 429",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m an authorized API-user",
  "keyword": "Given "
});
formatter.match({
  "location": "CommonFeatureSteps.i_m_an_authorized_API_user()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to \"GET\" to \"\"",
  "keyword": "When "
});
formatter.match({
  "location": "CommonFeatureSteps.i_request_to_to(String,String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request content type is \"application/json; charset\u0026#x3D;utf-8\"",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_content_type_is(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the request body is \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_request_body_is_requestBody(String)"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the endpoint should answer with a response",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_endpoint_should_answer_with_a_response()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 429",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 429(file:src/test/java/com/laegler/openbanking/api/feature/unsecuredSmeLoans/unsecured-sme-loans.feature:67)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response content type should be \"application/prs.openbanking.opendata.v2.3+json\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_content_type_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the response body should be \"\"",
  "keyword": "And "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_body_should_be(String)"
});
formatter.result({
  "status": "skipped"
});
formatter.uri("file:src/test/resources/features/atm.feature");
formatter.feature({
  "name": "ATM API",
  "description": "",
  "keyword": "Feature"
});
formatter.scenario({
  "name": "As an API-user I want to get all ATM positions",
  "description": "",
  "keyword": "Scenario"
});
formatter.step({
  "name": "I\u0027m authorized",
  "keyword": "Given "
});
formatter.match({
  "location": "AtmApiFeatureSteps.i_m_authorized()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "I request to get all ATM positions",
  "keyword": "When "
});
formatter.match({
  "location": "AtmApiFeatureSteps.i_request_to_get_all_ATM_positions()"
});
formatter.result({
  "status": "passed"
});
formatter.step({
  "name": "the response code should be 200",
  "keyword": "Then "
});
formatter.match({
  "location": "CommonFeatureSteps.the_response_code_should_be(Integer)"
});
formatter.result({
  "error_message": "java.lang.AssertionError: 1 expectation failed.\nExpected status code \u003c404\u003e but was \u003c200\u003e.\n\n\tat sun.reflect.GeneratedConstructorAccessor53.newInstance(Unknown Source)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)\n\tat org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)\n\tat org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\n\tat sun.reflect.GeneratedMethodAccessor58.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:126)\n\tat io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)\n\tat io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:134)\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)\n\tat sun.reflect.GeneratedMethodAccessor146.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)\n\tat io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)\n\tat features.steps.CommonFeatureSteps.the_response_code_should_be(CommonFeatureSteps.java:82)\n\tat ✽.the response code should be 200(file:src/test/resources/features/atm.feature:6)\n",
  "status": "failed"
});
formatter.step({
  "name": "the response should contain a list of ATM positions",
  "keyword": "And "
});
formatter.match({
  "location": "AtmApiFeatureSteps.the_response_should_contain_a_list_of_ATM_positions()"
});
formatter.result({
  "status": "skipped"
});
formatter.step({
  "name": "the list should have an ATM position with ID 123",
  "keyword": "And "
});
formatter.match({
  "location": "AtmApiFeatureSteps.the_list_should_have_an_ATM_position_with_ID(Integer)"
});
formatter.result({
  "status": "skipped"
});
});